package com.klfront.core.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.klfront.core.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Integer> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "Id", true, "ID");
        public final static Property LoginId = new Property(1, String.class, "LoginId", false, "loginId");
        public final static Property Nickname = new Property(2, String.class, "Nickname", false, "Nickname");
        public final static Property Email = new Property(3, String.class, "Email", false, "email");
        public final static Property Activied = new Property(4, boolean.class, "Activied", false, "ACTIVIED");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: Id
                "\"loginId\" TEXT," + // 1: LoginId
                "\"Nickname\" TEXT," + // 2: Nickname
                "\"email\" TEXT," + // 3: Email
                "\"ACTIVIED\" INTEGER NOT NULL );"); // 4: Activied
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String LoginId = entity.getLoginId();
        if (LoginId != null) {
            stmt.bindString(2, LoginId);
        }
 
        String Nickname = entity.getNickname();
        if (Nickname != null) {
            stmt.bindString(3, Nickname);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(4, Email);
        }
        stmt.bindLong(5, entity.getActivied() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String LoginId = entity.getLoginId();
        if (LoginId != null) {
            stmt.bindString(2, LoginId);
        }
 
        String Nickname = entity.getNickname();
        if (Nickname != null) {
            stmt.bindString(3, Nickname);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(4, Email);
        }
        stmt.bindLong(5, entity.getActivied() ? 1L: 0L);
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getInt(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LoginId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Email
            cursor.getShort(offset + 4) != 0 // Activied
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setLoginId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setActivied(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
