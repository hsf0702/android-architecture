package com.klfront.core.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.klfront.core.App;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP".
*/
public class AppDao extends AbstractDao<App, Integer> {

    public static final String TABLENAME = "APP";

    /**
     * Properties of entity App.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "Id", true, "ID");
        public final static Property AppId = new Property(1, String.class, "AppId", false, "appId");
        public final static Property Name = new Property(2, String.class, "Name", false, "Name");
        public final static Property Url = new Property(3, String.class, "Url", false, "url");
    }


    public AppDao(DaoConfig config) {
        super(config);
    }
    
    public AppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: Id
                "\"appId\" TEXT," + // 1: AppId
                "\"Name\" TEXT," + // 2: Name
                "\"url\" TEXT);"); // 3: Url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, App entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String AppId = entity.getAppId();
        if (AppId != null) {
            stmt.bindString(2, AppId);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String Url = entity.getUrl();
        if (Url != null) {
            stmt.bindString(4, Url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, App entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String AppId = entity.getAppId();
        if (AppId != null) {
            stmt.bindString(2, AppId);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String Url = entity.getUrl();
        if (Url != null) {
            stmt.bindString(4, Url);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public App readEntity(Cursor cursor, int offset) {
        App entity = new App( //
            cursor.getInt(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AppId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // Url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, App entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setAppId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(App entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(App entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(App entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
